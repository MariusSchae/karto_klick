# -*- coding: utf-8 -*-
"""
/***************************************************************************
 KartoKlick
                                 A QGIS plugin
 kliclkt Karte
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-11-29
        git sha              : $Format:%H$
        copyright            : (C) 2021 by testCOmpany
        email                : test@company.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import Qt, QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.gui import QgsMapTool,QgsMapToolPan
import openrouteservice
from openrouteservice.directions import directions

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Karto_klick_dialog import KartoKlickDialog
from qgis.core import *
import os.path


class SendPointToolCoordinates(QgsMapTool):
    """ Catches the coordinates from a click on a layer and displays them in a UI element
    """
    def __init__(self, canvas, window, label):
        """ Constructor.
        """
        QgsMapTool.__init__(self, canvas)
        self.canvas = canvas
        self.window = window # where we'll show the coordinates
        self.label = label
        self.setCursor(Qt.CrossCursor)
        window.hide()
    """ Wird aufgerufen, wenn mit der Maus in den Map-Canvas geklickt wird.
    """
    def canvasReleaseEvent(self, event):
        point = self.toMapCoordinates(event.pos())
        self.label.setText(str(point.x())+", "+str(point.y()))
        self.canvas.setMapTool(QgsMapToolPan(self.canvas))
        self.window.show()
        self.setCursor(Qt.ArrowCursor)

class KartoKlick:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # Declare instance attributes
        self.actions = []
        self.menu = u'&KartoKlick'

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Karto_klick/icon.png'
        self.add_action(
            icon_path,
            text=u'Karto Klicker',
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                u'&KartoKlick',
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""
        canvas = self.iface.mapCanvas()
        def getCoordinate1():
            send_point_tool_coordinates= SendPointToolCoordinates(canvas,self.dlg, self.dlg.coordinate1)
            canvas.setMapTool(send_point_tool_coordinates)


        def getCoordinate2():
            send_point_tool_coordinates= SendPointToolCoordinates(canvas,self.dlg, self.dlg.coordinate2)
            canvas.setMapTool(send_point_tool_coordinates)

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = KartoKlickDialog()


            self.dlg.coordinateSelect1.clicked.connect(getCoordinate1)

            self.dlg.coordinateSelect2.clicked.connect(getCoordinate2)


        # show the dialog
        self.dlg.show()


        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            point = self.dlg.coordinate1.text()

            if point == "":
                print("leer")
            else:
                print("startpunkt="+point)



            pass
